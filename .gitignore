# Байт-компилированные/оптимизированные/DLL-файлы
__pycache__/
*.py[cod]
*$py.class

# Расширения C
*.so

# Distribution / packaging
# Распределение/упаковка
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Обычно эти файлы пишутся скриптом Python из шаблона.
#  прежде чем PyInstaller создаст exe-файл, чтобы ввести в него дату/другую информацию.
*.manifest
*.spec

# Журналы установщика
pip-log.txt
pip-delete-this-directory.txt

# Отчеты о модульном тестировании/покрытии
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Переводы
*.mo
*.pot

# Django обращение:
*.log
local_settings.py
# db.sqlite3
# db.sqlite3-journal

# Flask обращение:
instance/
.webassets-cache

# Scrapy обращение:
.scrapy

# Документация Сфинкса
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   Для библиотеки или пакета вы можете игнорировать эти файлы, поскольку код
#   предназначен для работы в нескольких средах; в противном случае проверьте их:
# .python-version

# pipenv
#   Согласно pypa/pipenv#598, рекомендуется включить Pipfile.lock в систему контроля версий.
#   Однако в случае сотрудничества, если имеются зависимости или зависимости, специфичные для платформы
#   не имея кросс-платформенной поддержки, Pipenv может устанавливать зависимости, которые не работают или не работают.
#   установите все необходимые зависимости.
#Pipfile.lock

# poetry
#   Как и в случае с Pipfile.lock, обычно рекомендуется включать поэтику.lock в систему контроля версий.
#   Это особенно рекомендуется для бинарных пакетов, чтобы обеспечить воспроизводимость.
#   обычно игнорируется для библиотек.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Как и в случае с Pipfile.lock, обычно рекомендуется включать pdm.lock в систему контроля версий.
#pdm.lock
#   pdm хранит конфигурации всего проекта в .pdm.toml, но рекомендуется не включать его.
#   в системе контроля версий.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery обращение
celerybeat-schedule
celerybeat.pid

# Разобранные файлы SageMath
*.sage.py

# окружение
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Настройки проекта Spyder
.spyderproject
.spyproject

# Настройки проекта Rope
.ropeproject

# документация mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
# Проверка типа Pyre
.pyre/

# анализатор статических типов pytype
.pytype/

# Символы отладки Cython
cython_debug/

# PyCharm
#  Специальный шаблон JetBrains хранится в отдельном файле JetBrains.gitignore, который может
#  можно найти по адресу https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore.
#  и может быть добавлен в глобальный gitignore или объединен с этим файлом. Для более ядерного
#  вариант (не рекомендуется), вы можете раскомментировать следующее, чтобы игнорировать всю папку идей.
.idea/

/.vscode

/z-virt
/.git
